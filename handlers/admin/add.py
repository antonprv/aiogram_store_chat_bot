# –ü–æ–∫–∞ —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏.
from hashlib import md5
from typing import Tuple, List


from aiogram.dispatcher import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup
from aiogram.types import ReplyKeyboardRemove, ContentType
from aiogram.types.chat import ChatActions
from aiogram.utils.callback_data import CallbackData

from loader import dp, db, bot
from filters import IsAdmin
from handlers.user.menu import settings
from states import CategoryState, ProductState


# –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.
# –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—Å–µ–≥–¥–∞.
# –°–ª–µ–¥–æ–º —É–∂–µ –Ω—É–∂–Ω—ã–µ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ.
category_cb = CallbackData('category', 'id', 'action')


@dp.message_handler(IsAdmin(), text=settings)
async def process_settings(message: Message):

    # –°–æ–∑–¥–∞—é –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    markup = InlineKeyboardMarkup()

    # –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π,
    # –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–≤–ª–µ–∫–∞—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
    # –∏ —Ä–∞—Å–∫–∏–¥—ã–≤–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º.
    for idx, title in db.fetchall('SELECT * FROM categories'):
        # –ß–µ—Ä–µ–∑ action 'view' —Å–≤—è–∂–µ–º—Å—è —Å –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º,
        # –ö–æ—Ç–æ—Ä—ã–π –ø–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–π–¥–µ—Ç –∫ —Ç–∞–±–ª–∏—Ü–µ –∏ —Å–∫–∞–∂–µ—Ç,
        # —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        markup.add(InlineKeyboardButton(
            title, callback_data=category_cb.new(id=idx, action='view')))

    # –¢—É—Ç —Ç–∞–∫ –∂–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—é —É–∫–∞–∑–∞—Ç–µ–ª—å add_category, –∏ –Ω–∏–∂–µ –ø–æ –∫–æ–¥—É
    # –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–∫–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è.
    markup.add(InlineKeyboardButton(
        '+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='add_category'))

    await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', reply_markup=markup)


# –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É–¥–∞–ª—è—é –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º,
# –∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–∫–ª—é—á–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ title.
@dp.callback_query_handler(IsAdmin(), text='add_category')
async def add_category_callback_handler(query: CallbackQuery):
    await query.message.delete()
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
    await CategoryState.title.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–≤—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ tittle, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏,
# –∞ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
@dp.message_handler(IsAdmin(), state=CategoryState.title)
async def set_category_title_handler(message: Message, state: FSMContext):

    category_title = message.text
    idx = md5(category_title.encode('utf-8')).hexdigest()
    # –ó–∞–ø—É—Å–∫–∞—é SQL-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ id.
    db.query('INSERT INTO categories VALUES (?, ?)', (idx, category_title))

    # –í—ã—Ö–æ–∂—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è title.
    await state.finish()
    await process_settings(message)


# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é –∫–æ–ª–ª–±—ç–∫ —Å –¥–µ–π—Å—Ç–≤–∏–µ–º view:
@dp.callback_query_handler(IsAdmin(), category_cb.filter(action='view'))
async def category_callback_handler(query: CallbackQuery, callback_data: dict,
                                    state: FSMContext):

    category_idx = callback_data['id']

    products = db.fetchall('''SELECT * FROM products product
                           WHERE product.tag =
                           (SELECT title FROM categories WHERE idx=?)''',
                           (category_idx,))

    await query.message.delete()
    await query.answer('–í—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
    # –í —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –¥–∏–∞–ª–æ–≥–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    await state.update_data(category_index=category_idx)
    await show_products(query.message, products)


# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–Ω–∏–∏ –≤ –∫–Ω–æ–ø–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.

# –í—Å–µ –Ω—É–∂–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
# –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.
product_cb = CallbackData('product', 'id', 'action')

cancel_message = 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å'
add_product = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'
delete_category = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
back_message = 'üëà –ù–∞–∑–∞–¥'
all_right_message = '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ'


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —ç–∫—à–µ–Ω–∞ 'view'.
async def show_products(message: Message, products: List[Tuple]):
    # –î–æ–±–∞–≤–∏–ª –ø–æ –ø—Ä–∏–∫–æ–ª—É. –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –±—É–¥—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç.
    await bot.send_chat_action(message.chat.id, ChatActions.TYPING)

    # –î–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑ fetchall
    # –≤–∑—è—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∏–º–∏ —Ç–µ–∫—Å—Ç.
    for idx, title, body, image, price, tag in products:
        text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.'

        # –î–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É "—É–¥–∞–ª–∏—Ç—å" —Å–æ —Å–≤–æ–∏–º –∫–æ–ª–±—ç–∫–æ–º.
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å',
            callback_data=product_cb.new(id=idx, action='delete')))
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–≤–æ–∂—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç–æ–º
        # –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "—É–¥–∞–ª–∏—Ç—å"
        await message.answer_photo(photo=image,
                                   caption=text,
                                   reply_makrup=markup)

    # –°–æ–∑–¥–∞—é –±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (—Å–≤–µ—Ä—Ö—É)
    markup = ReplyKeyboardMarkup()
    markup.add(add_product)
    markup.add(delete_category)

    # –í—ã–≤–æ–∂—É –∫–Ω–æ–ø–∫–∏.
    await message.answer('–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?',
                         reply_markup=markup)


# –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
@dp.message_handler(IsAdmin(), text=delete_category)
async def delete_category_handler(message: Message, state: FSMContext):
    # –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–∏–∞–ª–æ–≥–∞.
    # –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ –¥–∏–∞–ª–æ–≥–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å.
    async with state.proxy() as data:
        if 'category_index' in data.keys():
            idx = data['category_index']

            db.query('DELETE FROM products WHERE tag IN '
                     '(SELECT title FROM categories WHERE idx=?)',
                     (idx,))
            db.query('DELETE FROM categories WHERE idx=?', (idx,))

            await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
            await process_settings(message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.
@dp.message_handler(IsAdmin(), text=add_product)
async def process_add_product(message: Message):
    # –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
    await ProductState.title.set()

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(cancel_message)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=markup)


# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
@dp.message_handler(IsAdmin(), text=cancel_message,
                    state=ProductState.title)
async def process_cancel(message: Message, state: FSMContext):
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                         reply_markup=ReplyKeyboardRemove())
    await state.finish()

    await process_settings(message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
@dp.message_handler(IsAdmin(), state=ProductState.title)
async def process_title(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏,
    # —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ.
    async with state.proxy() as data:
        data['title'] = message.text

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (body)
    await ProductState.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=back_markup())


def back_markup():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(back_message)

    return markup


# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
# –ò–º—è —Å—Ç–∞–≤–∏—Ç—Å—è –∑–∞–Ω–æ–≤–æ.
@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.title)
async def process_title_back(message: Message, state: FSMContext):
    await process_add_product(message)


# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.body)
async def process_body_back(message: Message, state: FSMContext):
    await ProductState.title.set()

    async with state.proxy() as data:
        await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å <b>{data['title']}</b>"
                             " –Ω–∞...",
                             reply_markup=back_markup())


# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–º–µ–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
# –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ—é—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(–∫–∞—Ä—Ç–∏–Ω–∫–∞)
@dp.message_handler(IsAdmin(), state=ProductState.body)
async def process_body(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['body'] = message.text

    await ProductState.next()
    await message.answer('–§–æ—Ç–æ?', reply_markup=back_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ.
@dp.message_handler(IsAdmin(), content_types=ContentType.PHOTO,
                    state=ProductState.image)
async def process_image_photo(message: Message, state: FSMContext):
    # –í —Ç–µ–ª–µ–≥—Ä–∞–º–µ —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    # –ß–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å [-1] –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
    # –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
    fileID = message.photo[-1].file_id
    # –ü–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–µ—Ä–µ–¥–∞—ë–º —Ñ–æ—Ç–æ –±–æ—Ç—É.
    file_info = await bot.get_file(fileID)
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ.
    downloaded_file = (await bot.download_file(file_info.file_path)).read()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≤ —Å—Ç–∞—Ç—É—Å image, –∫–∞–∫ –¥–æ —ç—Ç–æ–≥–æ
    # —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã.
    # –ö—Å—Ç–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å.
    async with state.proxy() as data:
        data['image'] = downloaded_file

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\—Å—Ç–∞—Ç—É—Å.
    await ProductState.next()
    await message.answer('–¶–µ–Ω–∞?', reply_markup=back_markup())


# –í—ã–≤–æ–¥ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–µ–Ω—ã.
# –ü—Ä—è–º–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.
@dp.message_handler(IsAdmin(), lambda message: message.text.isdigit(),
                    state=ProductState.price)
async def process_price(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text

        title = data['title']
        body = data['body']
        price = data['price']

        await ProductState.next()
        text = f'<b>{title}</b>\n\n{body}\n–¶–µ–Ω–∞: {price}—Ä—É–±–ª–µ–π.'

        markup = check_markup()

        await message.answer_photo(photo=data['image'],
                                   caption=text,
                                   reply_markup=markup)


def check_markup():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row(back_message, all_right_message)

    return markup


# –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ confirm –∏ –ø–∏—à–µ—Ç —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
@dp.message_handler(IsAdmin(), text=all_right_message,
                    state=ProductState.confirm)
async def process_confirm(message: Message, state: FSMContext):
    async with state.proxy() as data:
        title = data['title']
        body = data['body']
        image = data['image']
        price = data['price']

        tag = db.fetchone(
            'SELECT title FROM categories WHERE idx=?',
            (data['category_index'],))[0]
        idx = md5(' '.join([title, body, price, tag]
                           ).encode('utf-8')).hexdigest()

        db.query('INSERT INTO products VALUES(?, ?, ?, ?, ?, ?)',
                 (idx, title, body, image, int(price), tag))

        await state.finish()
        await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
        await process_settings(message)


# –í—ã—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ "—É–¥–∞–ª–∏—Ç—å" –∏–∑ show_products
# –∏ —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
@dp.callback_query_handler(IsAdmin(), product_cb.filter(action='delete'))
async def delete_product_callback_handler(query: CallbackQuery,
                                          callback_data: dict):
    product_idx = callback_data[id]
    db.query('DELETE FROM PRODUCTS WHERE idx=?', (product_idx,))
    await query.answer('–£–¥–∞–ª–µ–Ω–æ!')
    await query.message.delete()


@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.confirm)
async def process_confirm_back(message: Message, state: FSMContext):
    await ProductState.price.set()
    async with state.proxy as data:
        await message.answer(f'–ò–∑–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Å <b>{data['price']}</b>?',
                             reply_makrup=back_markup())


@db.message_handler(IsAdmin(), content_types=ContentType.TEXT,
                    state=ProductState.image)
async def process_image_url(message: Message, state: FSMContext):
    if message.text == back_message:

        await ProductState.body.set()

        async with state.proxy() as data:
            await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å <b>{data['body']}</b>?",
                                 reply_markup=back_markup())
    else:
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.')
